package woven_bank;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    protected Logger myLogger;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        this.myLogger = new Logger();
        this.myLogger.setScreen(true);
    }

    public void deposit(int amount) {
        this.balanceInCents = balanceInCents + amount;
        String logMessage = myLogger.getLogMessage();
        boolean screenEnabled = myLogger.getScreenEnabled();
        System.out.println(screenEnabled);
        boolean fileEnabled = myLogger.getFileEnabled();
        if (screenEnabled) {
            myLogger.logToScreen(logMessage);
            System.out.println("TEST");
        }
        String name = owner.getName();
        String fileName = "Account of " + name + ".txt";
        if (fileEnabled) {
            try {
                myLogger.logToFile(logMessage, fileName);
            }
            catch(Exception e){
                e.printStackTrace();
            }
            
        }
    }

    public void withdraw(int amount) {
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughFundsException nefException = new NotEnoughFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }

    void logExecutionTime() {
        long start = System.nanoTime();
        long delta = System.nanoTime() - start;
        String method = new Object(){}.getClass().getEnclosingMethod().getName();
        String logMessage = method + " has executed on object " + this + " in " + delta + " ns";
        myLogger.setLoggerTime(logMessage);
    }

    void loggingOperationExecution() {
        String methodName = new Object(){}.getClass().getEnclosingMethod().getName();
        String logMessage = methodName + " has executed on object " + this;
        myLogger.setLogMessage(logMessage);
    }

    protected boolean setSimpleMyLogger(Logger newObject) {
        if (newObject != null) {
            Logger oldAssociated = getMyLogger();
            if (oldAssociated != null) {
                boolean wasSet = oldAssociated.setSimpleMyLoggable(null);
                if (wasSet == false) {
                    return false;
                }
            }
        }
        this.myLogger = newObject;
        return true;
    }

    Logger getMyLogger() {
        return this.myLogger;
    }

}
